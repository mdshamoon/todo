{"version":3,"sources":["components/CreateItem.tsx","components/TodoListItem.tsx","components/TodoList.tsx","utils/functions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CreateItem","toDoItems","createItem","useState","newItem","setNewItem","handleCreate","className","value","onChange","event","target","onKeyPress","key","placeholder","onClick","ToDoListItem","renderName","renderButtons","completed","saveItem","name","id","toggleComplete","deleteItem","editing","setEditing","inputValue","setInputValue","itemStyle","textDecoration","cursor","onSaveClick","type","style","ToDoList","props","items","map","item","index","getLatestId","latestId","localStorage","getItem","nextId","Number","setItem","toString","App","JSON","parse","getTodoItems","setToDoItems","useEffect","todoItems","stringify","newList","filter","element","oldIidtemId","newItemName","editedItem","toggledItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aa83383.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport interface CreateItemProps {\n  toDoItems: any;\n  createItem: any;\n}\n\nexport const CreateItem: React.FC<CreateItemProps> = ({\n  toDoItems,\n  createItem,\n}) => {\n  const [newItem, setNewItem] = useState(\"\");\n  const handleCreate = () => {\n    setNewItem(\"\");\n    createItem(newItem);\n  };\n\n  return (\n    <div className=\"create-new\">\n      <input\n        value={newItem}\n        onChange={(event) => {\n          setNewItem(event.target.value);\n        }}\n        onKeyPress={(event) => {\n          if (event.key === \"Enter\") {\n            handleCreate();\n          }\n        }}\n        placeholder=\"New Task\"\n      />\n      <button onClick={() => handleCreate()}>Create</button>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport React from \"react\";\nimport { ToDoListProps } from \"./TodoList\";\n\ninterface ToDoListItemProps extends ToDoListProps {\n  completed: boolean;\n  saveItem: any;\n  name: string;\n  id: string;\n}\n\nexport const ToDoListItem: React.FC<ToDoListItemProps> = ({\n  completed,\n  saveItem,\n  name,\n  id,\n  toggleComplete,\n  deleteItem,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(name);\n\n  const itemStyle = {\n    textDecoration: completed ? \"line-through\" : \"none\",\n    cursor: \"pointer\",\n  };\n\n  let renderName, renderButtons;\n\n  const onEditClick = () => {\n    setEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setEditing(false);\n  };\n\n  const onSaveClick = () => {\n    saveItem(id, inputValue);\n    setEditing(false);\n  };\n\n  if (editing) {\n    renderName = (\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(event) => setInputValue(event.target.value)}\n        onKeyPress={(event) => {\n          if (event.key === \"Enter\") {\n            onSaveClick();\n          }\n        }}\n      />\n    );\n\n    renderButtons = (\n      <span>\n        <button onClick={() => onSaveClick()}>Save</button>\n        <button onClick={() => onCancelClick()}>Cancel</button>\n      </span>\n    );\n  } else {\n    renderName = (\n      <span style={itemStyle} onClick={() => toggleComplete(id)}>\n        {name}\n      </span>\n    );\n\n    renderButtons = (\n      <span>\n        <button onClick={() => onEditClick()}>Edit</button>\n        <button onClick={() => deleteItem(id)}>Delete</button>\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"to-do-item\">\n      <span className=\"name\">{renderName}</span>\n      <span className=\"actions\">{renderButtons}</span>\n    </div>\n  );\n};\n","import { ToDoListItem } from \"./TodoListItem\";\n\nexport interface ToDoListProps {\n  toDoItems: any;\n  deleteItem: any;\n  saveItem: any;\n  toggleComplete: any;\n}\n\nexport const ToDoList: React.FC<ToDoListProps> = (props) => {\n  const items = props.toDoItems.map((item: any, index: number) => (\n    <ToDoListItem key={index} {...item} {...props} />\n  ));\n  return <div className=\"items-list\">{items}</div>;\n};\n","export const getLatestId = () => {\n  const latestId = localStorage.getItem(\"id\");\n  if (latestId) {\n    const nextId = Number(latestId) + 1;\n    localStorage.setItem(\"id\", nextId.toString());\n    return latestId;\n  }\n  localStorage.setItem(\"id\", \"1\");\n  return \"1\";\n};\n\nexport const getTodoItems = () => {\n  const items: any = localStorage.getItem(\"todoItems\");\n  if (items) {\n    return JSON.parse(items);\n  }\n  localStorage.setItem(\"todoItems\", \"[]\");\n  return [];\n};\n\nexport const setTodoItemsLocally = (todoItems: any) => {\n  localStorage.setItem(\"todoItems\", JSON.stringify(todoItems));\n};\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { CreateItem } from \"./components/CreateItem\";\nimport { ToDoList } from \"./components/TodoList\";\nimport {\n  getLatestId,\n  getTodoItems,\n  setTodoItemsLocally,\n} from \"./utils/functions\";\n\nexport interface TodoItem {\n  name: string;\n  completed: boolean;\n  id: string;\n}\n\nfunction App() {\n  const [toDoItems, setToDoItems] = useState<Array<TodoItem>>(getTodoItems());\n\n  useEffect(() => {\n    setTodoItemsLocally(toDoItems);\n  }, [toDoItems]);\n\n  const createItem = (item: string) => {\n    const newItem = { name: item, completed: false, id: getLatestId() };\n    setToDoItems([...toDoItems, newItem]);\n  };\n\n  const toggleComplete = (id: string) => {\n    const toggledItems = toDoItems.map((item) => {\n      if (item.id === id) {\n        item.completed = !item.completed;\n      }\n      return item;\n    });\n    setToDoItems(toggledItems);\n  };\n\n  const saveItem = (oldIidtemId: string, newItemName: string) => {\n    const editedItem = toDoItems.map((item) => {\n      if (item.id === oldIidtemId) {\n        item.name = newItemName;\n      }\n      return item;\n    });\n\n    setToDoItems(editedItem);\n  };\n\n  const deleteItem = (id: string) => {\n    const newList = toDoItems.filter((element) => element.id !== id);\n    setToDoItems(newList);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"to-do-app\">\n        <div className=\"header\">\n          <h1>ToDo List</h1>\n        </div>\n        <CreateItem toDoItems={toDoItems} createItem={createItem} />\n        <ToDoList\n          toDoItems={toDoItems}\n          deleteItem={deleteItem}\n          saveItem={saveItem}\n          toggleComplete={toggleComplete}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}